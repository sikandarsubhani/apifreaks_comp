{"version":3,"sources":["/home/sikanadar/Desktop/apifreaks_components/apifreaks_comp/dist/exports-client.js","../src/library/components/common/DropDownMenu.tsx","../src/library/components/navigation/MobileNavigationGlobal.tsx","../src/library/components/navigation/site-search/SearchBar.tsx","../src/library/hooks/hook.ts","../src/library/components/dark-mode/ThemeProvider.tsx","../src/library/components/dark-mode/DarkModeToggle.tsx"],"names":["jsxs","clsx","jsx","Link","useState","getSystemTheme"],"mappings":"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","file":"/home/sikanadar/Desktop/apifreaks_components/apifreaks_comp/dist/exports-client.js","sourcesContent":[null,"'use client';\n\nimport { ChevronRightIcon } from '../../icons/Icons';\nimport clsx from 'clsx';\nimport Link from 'next/link';\nimport { useState } from 'react';\n\ntype DropdownMenuProps = {\n  title: string;\n  items: Array<{ title: string; link: string }>;\n  className?: string;\n  page: string;\n  linkPrefetch?: boolean;\n};\n\nfunction DropdownMenu({\n  title,\n  items,\n  className,\n  page,\n  linkPrefetch = true,\n}: DropdownMenuProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleDropdownOpen = () => setIsOpen(true);\n  const toggleDropdownClose = () => setIsOpen(false);\n\n  return (\n    <div className='relative'>\n      <div\n        onMouseEnter={toggleDropdownOpen}\n        onMouseLeave={toggleDropdownClose}\n        className='cursor-pointer'\n      >\n        <div className='font-bold'>\n          <Link\n            href={page}\n            className='flex items-center'\n            prefetch={linkPrefetch}\n          >\n            <p>{title}</p>\n          </Link>\n        </div>\n      </div>\n      {isOpen && (\n        <div\n          onMouseEnter={toggleDropdownOpen}\n          onMouseLeave={toggleDropdownClose}\n          className='absolute w-48 h-20 z-50'\n        >\n          <div\n            className={clsx(\n              'mt-8 w-[45rem] bg-white dark:text-soft-white dark:bg-primary-dark shadow-xl rounded-lg overflow-hidden border border-gray-100 transform transition-all duration-300 ease-in-out dark:border-none',\n              className\n            )}\n          >\n            <div className='p-4'>\n              <h3 className='text-lg font-semibold text-gray-800 mb-3 dark:text-soft-white'>\n                {title}\n              </h3>\n              <div className='grid grid-cols-3 gap-3'>\n                {items.map(item => (\n                  <div key={item.title} className='group relative'>\n                    <Link\n                      href={item.link}\n                      className='block p-3 rounded-lg transition-all duration-200 ease-in-out\n                        bg-gray-100 dark:bg-black hover:bg-gray-50 dark:hover:bg-primary-dark-hover hover:shadow-md\n                        transform hover:-translate-y-1'\n                      prefetch={linkPrefetch}\n                    >\n                      <div className='flex flex-col space-y-2'>\n                        <span className='text-sm font-medium text-primary-dark group-hover:text-primary-dark-hover dark:text-soft-white'>\n                          {item.title}\n                        </span>\n                        <span className='text-xs text-gray-500 group-hover:text-gray-400'>\n                          {`Explore ${title}`} →\n                        </span>\n                      </div>\n                    </Link>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className='bg-gray-50 px-4 py-3 border-t border-gray-100 dark:bg-dark-gray  dark:border-none'>\n              <Link\n                href={page}\n                className='text-sm text-primary-dark hover:text-primary-dark-hover font-medium flex items-center dark:text-soft-white'\n                prefetch={linkPrefetch}\n              >\n                View all {title} <ChevronRightIcon />\n              </Link>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default DropdownMenu;\n","'use client';\n\nimport { HamburgerIcon, MobileNavigationCloseIcon } from '../../icons/Icons';\nimport { PAGE } from '../../utils/constants';\nimport { navigationLinksPublic } from '../../utils/navigation-links';\nimport { pageUrl } from '../../utils/utils';\nimport clsx from 'clsx';\nimport Link from 'next/link';\nimport { useState } from 'react';\n\nfunction MobileNavigation() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState<boolean>(false);\n\n  return (\n    <div className='ml-auto lg:hidden w-full'>\n      <div className='flex-cb'>\n        <div className='flex items-center gap-2'>\n          <button\n            onClick={() => setIsMobileMenuOpen(prev => !prev)}\n            className='block text-primary-dark hover:text-gray-500 cursor-pointer'\n          >\n            {isMobileMenuOpen ? (\n              <MobileNavigationCloseIcon />\n            ) : (\n              <HamburgerIcon />\n            )}\n          </button>\n        </div>\n      </div>\n      {isMobileMenuOpen && (\n        <nav\n          className={clsx(\n            'absolute bg-primary top-[100%] left-0 z-20 px-2 w-full border-y border-primary-dark py-10 space-y-12 text-base'\n          )}\n        >\n          <div>\n            <ul className='bg-primary text-primay-dark space-y-6 text-center'>\n              {navigationLinksPublic.map(item => (\n                <li key={item.label}>\n                  <Link href={item.href} className={clsx('font-bold')}>\n                    {item.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className='flex-cc flex-col gap-5 font-bold'>\n            <Link className='hover:text-black' href={pageUrl(PAGE.Login)}>\n              Sign In\n            </Link>\n            <Link\n              href={pageUrl(PAGE.Signup)}\n              className='bg-primary-dark text-white rounded-full py-3 px-4 hover:bg-primary-dark-hover'\n            >\n              Sign Up\n            </Link>\n          </div>\n        </nav>\n      )}\n    </div>\n  );\n}\n\nexport default MobileNavigation;\n","'use client';\n\nimport { PAGE } from '../../../utils/constants';\nimport Fuse, { FuseResult, FuseResultMatch } from 'fuse.js';\nimport Link from 'next/link';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { SearchBarPage } from '../../../types/types';\nimport { navigationLinksPublic } from '../../../utils/navigation-links';\nimport { pageUrl, stopClickPropagation } from '../../../utils/utils';\nimport DarkModeToggle from '../../dark-mode/DarkModeToggle';\nimport { CrossIcon, SearchIcon } from '../../../icons/Icons';\n\nconst options = {\n  keys: [\n    { name: 'title', weight: 0.6 },\n    { name: 'content', weight: 0.4 },\n    { name: 'category', weight: 0.3 },\n    { name: 'tags', weight: 0.2 },\n  ],\n  includeScore: true,\n  includeMatches: true,\n  threshold: 0.3,\n  shouldSort: true,\n  minMatchCharLength: 1,\n  distance: 150,\n  useExtendedSearch: true,\n  ignoreLocation: false,\n};\n\nexport default function SiteSearchBar({\n  searchablePages,\n}: {\n  searchablePages: SearchBarPage[];\n}) {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<Array<FuseResult<SearchBarPage>>>([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const fuse = useMemo(\n    () => new Fuse(searchablePages, options),\n    [searchablePages]\n  );\n\n  function handleSearch(value: string) {\n    setQuery(value);\n    if (!value) return setResults([]);\n    const fuseResults = fuse.search(value);\n    setResults(fuseResults);\n  }\n\n  function openModal() {\n    setIsModalOpen(true);\n    setTimeout(() => inputRef.current?.focus(), 100);\n  }\n\n  function closeModal() {\n    setIsModalOpen(false);\n    setQuery('');\n    setResults([]);\n  }\n\n  function isSwaggerRelated(path: string): boolean {\n    return path.includes('/swagger') || path.includes('swagger');\n  }\n\n  function handleLinkClick(path: string) {\n    closeModal();\n\n    if (isSwaggerRelated(path)) {\n      window.location.href = path;\n      return false;\n    }\n\n    return true;\n  }\n\n  useEffect(() => {\n    function handleKeyDown(e: KeyboardEvent) {\n      if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'k') {\n        e.preventDefault();\n        openModal();\n      } else if (e.key === 'Escape') {\n        closeModal();\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  return (\n    <>\n      <div className='flex flex-row gap-2'>\n        <DarkModeToggle />{' '}\n        <div\n          className='relative cursor-pointer group transition-all duration-200'\n          onClick={openModal}\n        >\n          {/* Mobile: Search icon only */}\n          <div className='lg:hidden flex items-center justify-center'>\n            <div className='text-primary-dark hover:text-gray-500 cursor-pointer transition-colors'>\n              <SearchIcon width='1.9rem' height='1.9rem' />\n            </div>\n          </div>\n\n          {/* Desktop/Tablet: Full search bar */}\n          <div className='hidden lg:flex items-center relative'>\n            <input\n              type='text'\n              placeholder='Search'\n              readOnly\n              className='dark:text-soft-white dark:bg-off-black pl-4 pr-16 py-2.5 w-20 sm:w-30 lg:w-35 border border-gray-400 rounded-full bg-white backdrop-blur-sm focus:outline-none placeholder-gray-500 hover:bg-white dark:hover:bg-off-black hover:shadow-lg transition-all duration-300 group-hover:border-primary/40'\n            />\n            <div className='absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center gap-2'>\n              <kbd className='px-2 py-1 text-xs font-medium text-gray-500 dark:text-soft-white bg-gray-100 dark:bg-dark-gray border border-gray-200 rounded-md transition-colors dark:border-none dark:bg-dark-gray'>\n                CTRL+K\n              </kbd>\n            </div>\n          </div>\n        </div>\n        {isModalOpen && (\n          <div\n            className='fixed inset-0 z-50 bg-black/70 flex justify-center items-start pt-[10vh] px-4'\n            onClick={closeModal}\n          >\n            <div\n              className='w-full max-w-3xl max-h-[80vh] overflow-hidden bg-white dark:text-soft-white dark:bg-black rounded-2xl shadow-2xl relative p-6 border border-gray-200'\n              onClick={stopClickPropagation}\n            >\n              {/* Close Button */}\n              <button\n                onClick={closeModal}\n                className='absolute top-4 right-4 text-gray-500 hover:text-gray-800 hover:bg-gray-100 rounded-full p-1 transition cursor-pointer dark:text-soft-white dark:hover:bg-off-black'\n              >\n                <CrossIcon width='1.5rem' height='1.5rem' />\n              </button>\n\n              {/* Search Input */}\n              <div className='flex-cb w-full px-4 py-2 mt-10 border border-primary-dark rounded-md focus:outline-none focus:ring-1 focus:ring-primary-dark-hover dark:bg-primary-dark-hover'>\n                <input\n                  ref={inputRef}\n                  type='text'\n                  value={query}\n                  onChange={e => handleSearch(e.target.value)}\n                  placeholder='Search docs, tools, blog...'\n                  className='border-none w-full focus:outline-none placeholder-gray-400 dark:placeholder-soft-white'\n                />\n                <SearchIcon />\n              </div>\n\n              <div className='overflow-y-auto mt-6 pr-1 max-h-[45vh]'>\n                {results.length > 0 ? (\n                  <div className='space-y-2'>\n                    {results.map((result, index) => (\n                      <div key={index} className='border-l-2 border-primary'>\n                        {isSwaggerRelated(result.item.path) ? (\n                          <a\n                            href={result.item.path}\n                            onClick={() => handleLinkClick(result.item.path)}\n                            className='block px-4 py-3 hover:bg-gray-50 rounded-md transition text-base font-medium dark:bg-primary-dark dark:hover:bg-primary-dark-hover dark:text-soft-white'\n                          >\n                            <div className='flex items-center justify-between'>\n                              <div\n                                className='flex-1 text-base'\n                                dangerouslySetInnerHTML={{\n                                  __html: highlightText(\n                                    result.item.title,\n                                    result.matches?.filter(m => m.key === 'title')\n                                  ),\n                                }}\n                              />\n                              <div className='ml-3 flex items-center gap-2'>\n                                {result.item.category && (\n                                  <span className='px-2 py-1 text-sm bg-gray-200 dark:bg-primary dark:hover:bg-primary-hover dark:text-primary-dark text-pretty rounded-full font-normal'>\n                                    {result.item.category}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </a>\n                        ) : (\n                          <Link\n                            href={result.item.path}\n                            onClick={() => handleLinkClick(result.item.path)}\n                            className='block px-4 py-3 hover:bg-gray-50 dark:hover:bg-primary-dark rounded-md transition text-base font-medium dark:bg-primary-dark dark:hover:bg-primary-dark-hover dark:text-soft-white'\n                          >\n                            <div className='flex items-center justify-between'>\n                              <div\n                                className='flex-1 text-base'\n                                dangerouslySetInnerHTML={{\n                                  __html: highlightText(\n                                    result.item.title,\n                                    result.matches?.filter(m => m.key === 'title')\n                                  ),\n                                }}\n                              />\n                              <div className='ml-3 flex items-center gap-2'>\n                                {result.item.category && (\n                                  <span className='px-2 py-1 text-sm bg-gray-200 dark:bg-primary dark:hover:bg-primary-hover dark:text-primary-dark text-pretty rounded-full font-normal'>\n                                    {result.item.category}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </Link>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                ) : query ? (\n                  <div className='text-center text-gray-400 text-base mt-8'>\n                    No results found for &ldquo;\n                    <span className='font-medium'>{query}</span>&rdquo;\n                  </div>\n                ) : (\n                  <div className='space-y-6'>\n                    <h3 className='text-sm font-semibold uppercase tracking-wider text-gray-500 mb-2 px-1 dark:text-soft-white'>\n                      Quick Links\n                    </h3>\n                    <ul className='ml-2 border-l-2 border-primary divide-y dark:bg-primary-dark dark:hover:primary-dark-hover dark:text-soft-white'>\n                      {navigationLinksPublic.map((link, index) => (\n                        <li key={index}>\n                          <Link\n                            href={link.href}\n                            onClick={() => handleLinkClick(link.href)}\n                            className='block px-4 py-3 hover:bg-gray-50 dark:hover:bg-primary-dark-hover rounded-md transition text-base font-medium'\n                          >\n                            {link.label}\n                          </Link>\n                        </li>\n                      ))}\n                      <li>\n                        <Link\n                          href={pageUrl(PAGE.Swagger)}\n                          onClick={closeModal}\n                          className='block px-4 py-3 hover:bg-gray-50 dark:hover:bg-primary-dark-hover rounded-md transition text-base font-medium'\n                        >\n                          Swagger Docs\n                        </Link>\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div >\n    </>\n  );\n}\n\nfunction highlightText(\n  text: string,\n  matches: Array<FuseResultMatch> | undefined\n) {\n  if (!matches || matches.length === 0) return text;\n\n  // Collect all match indices and sort them by start position\n  const allIndices: Array<[number, number]> = [];\n  matches.forEach(match => {\n    match.indices.forEach(([start, end]) => {\n      allIndices.push([start, end]);\n    });\n  });\n\n  // Sort by start position to avoid overlap issues\n  allIndices.sort((a, b) => a[0] - b[0]);\n\n  // Remove overlapping indices\n  const cleanIndices: Array<[number, number]> = [];\n  for (const [start, end] of allIndices) {\n    const lastIndex = cleanIndices[cleanIndices.length - 1];\n    if (!lastIndex || start > lastIndex[1]) {\n      cleanIndices.push([start, end]);\n    } else if (end > lastIndex[1]) {\n      // Extend the last index if current end is greater\n      cleanIndices[cleanIndices.length - 1] = [lastIndex[0], end];\n    }\n  }\n\n  // Build highlighted text from right to left to avoid index shifting\n  let result = text;\n  for (let i = cleanIndices.length - 1; i >= 0; i--) {\n    const [start, end] = cleanIndices[i];\n    const matchedText = text.substring(start, end + 1);\n    result =\n      result.substring(0, start) +\n      `<mark>${matchedText}</mark>` +\n      result.substring(end + 1);\n  }\n\n  return result;\n}","import { useContext } from \"react\";\nimport { THEME, ThemeContextType } from \"../types/types\";\nimport { ThemeContext } from \"../components/dark-mode/ThemeProvider\";\n\nexport function useTheme(): ThemeContextType {\n  const defaultThemeContext: ThemeContextType = {\n    theme: THEME.System,\n    toggleTheme: () => {\n      throw new Error('ThemeProvider is missing: toggleTheme called outside provider');\n    },\n    setTheme: (t: THEME) => {\n      throw new Error(`ThemeProvider is missing: attempted setTheme(${t})`);\n    },\n  };\n  const context = useContext(ThemeContext);\n  return context ?? defaultThemeContext;\n}","'use client';\nimport { THEME, ThemeContextType } from '../../types/types';\nimport { createContext, ReactNode, useCallback, useEffect, useState } from 'react';\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nfunction ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setThemeState] = useState<THEME>(THEME.System);\n  const [mounted, setMounted] = useState(false);\n  const [systemTheme, setSystemTheme] = useState<THEME>(THEME.Light);\n\n  const getSystemTheme = () =>\n    window.matchMedia('(prefers-color-scheme: dark)').matches ? THEME.Dark : THEME.Light;\n\n  const applyTheme = useCallback((currentTheme: THEME, sysTheme?: THEME) => {\n    let actualTheme: THEME = currentTheme;\n    if (currentTheme === THEME.System) {\n      actualTheme = sysTheme || getSystemTheme();\n    }\n    document.documentElement.classList.remove('light', 'dark', 'theme-ready');\n    document.documentElement.classList.add('theme-ready', actualTheme);\n  }, []);\n\n  useEffect(() => {\n    let initialTheme: THEME = THEME.System;\n    const storedTheme = localStorage.getItem('theme') as THEME | null;\n    if (storedTheme === THEME.Light || storedTheme === THEME.Dark) {\n      initialTheme = storedTheme;\n    } else {\n      initialTheme = THEME.System;\n    }\n    setThemeState(initialTheme);\n    const sys = getSystemTheme();\n    setSystemTheme(sys);\n    applyTheme(initialTheme, sys);\n    try {\n      localStorage.setItem('theme', initialTheme);\n    } catch {\n      // Ignore errors if localStorage is not available\n    }\n    setMounted(true);\n  }, [applyTheme]);\n\n  useEffect(() => {\n    if (!mounted) return;\n    if (theme !== THEME.System) return;\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      const sysTheme = getSystemTheme();\n      setSystemTheme(sysTheme); // force re-render\n      applyTheme(THEME.System, sysTheme);\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme, applyTheme, mounted]);\n\n  useEffect(() => {\n    if (!mounted) return;\n    if (theme === THEME.System) {\n      // Always compute the latest system theme when switching to System\n      const sys = getSystemTheme();\n      setSystemTheme(sys);\n      applyTheme(THEME.System, sys);\n      try {\n        localStorage.setItem('theme', THEME.System);\n      } catch {\n        // Ignore errors if localStorage is not available\n      }\n    } else {\n      applyTheme(theme);\n      if (theme === THEME.Light || theme === THEME.Dark) {\n        try {\n          localStorage.setItem('theme', theme);\n        } catch {\n          // Ignore errors if localStorage is not available\n        }\n      }\n    }\n  }, [theme, systemTheme, applyTheme, mounted]);\n\n  const toggleTheme = () => {\n    if (theme === THEME.Light) {\n      setThemeState(THEME.Dark);\n    } else {\n      setThemeState(THEME.Light);\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme: setThemeState }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport default ThemeProvider;","'use client';\nimport { useTheme } from '../../hooks/hook';\nimport { THEME } from '../../types/types';\nimport clsx from 'clsx';\nimport { useEffect, useRef, useState } from 'react';\nimport { DarkModeIcon, LightModeIcon, SystemIcon } from '../../icons/Icons';\n\nconst themeOptions: { value: THEME; label: string; icon: React.ReactNode }[] = [\n  { value: THEME.Light, label: 'Light', icon: <ResponsiveIcon Icon={LightModeIcon} /> },\n  { value: THEME.Dark, label: 'Dark', icon: <ResponsiveIcon Icon={DarkModeIcon} /> },\n  { value: THEME.System, label: 'System', icon: <ResponsiveIcon Icon={SystemIcon} /> },\n];\n\nfunction DarkModeToggle() {\n  const { theme, setTheme } = useTheme();\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setDropdownOpen(false);\n      }\n    }\n    if (dropdownOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside);\n    }\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [dropdownOpen]);\n\n  const [effectiveTheme, setEffectiveTheme] = useState<THEME.Light | THEME.Dark>(THEME.Light);\n\n  useEffect(() => {\n    if (theme === THEME.System) {\n      const updateSystemTheme = () => {\n        setEffectiveTheme(getSystemTheme());\n      };\n      updateSystemTheme();\n      let mediaQuery: MediaQueryList | null = null;\n      if (typeof window !== 'undefined') {\n        mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n        mediaQuery.addEventListener('change', updateSystemTheme);\n      }\n      return () => {\n        if (mediaQuery) {\n          mediaQuery.removeEventListener('change', updateSystemTheme);\n        }\n      };\n    } else {\n      setEffectiveTheme(theme as THEME.Light | THEME.Dark);\n    }\n  }, [theme]);\n\n  const isDark = effectiveTheme === THEME.Dark;\n  const mainIcon = isDark ? <ResponsiveIcon Icon={DarkModeIcon} /> : <ResponsiveIcon Icon={LightModeIcon} />;\n\n  return (\n    <div className=\"relative inline-block\" ref={dropdownRef}>\n      <button\n        onClick={() => setDropdownOpen(open => !open)}\n        aria-label={`Current theme: ${theme}. Click to change theme`}\n        className={clsx(\n          'p-1.5 lg:p-3 flex items-center justify-center rounded-full transition-all duration-300 cursor-pointer',\n          isDark\n            ? 'bg-gray-900 text-white hover:bg-gray-600'\n            : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\n        )}\n        type=\"button\"\n      >\n        {mainIcon}\n      </button>\n      {dropdownOpen && (\n        <div\n          className={clsx(\n            'absolute top-full mt-2 right-0 py-2 rounded-lg shadow-lg border z-50 min-w-32',\n            effectiveTheme === THEME.Light\n              ? 'bg-white border-gray-200'\n              : 'bg-primary-dark border-gray-600'\n          )}\n        >\n          {themeOptions.map(option => (\n            <button\n              key={option.value}\n              onClick={() => {\n                setTheme(option.value);\n                setDropdownOpen(false);\n              }}\n              className={clsx(\n                'w-full px-4 py-2 text-left flex items-center gap-3 transition-colors duration-200 cursor-pointer',\n                theme === option.value\n                  ? effectiveTheme === THEME.Light\n                    ? 'bg-blue-50 text-blue-700'\n                    : ' text-blue-200'\n                  : effectiveTheme === THEME.Light\n                    ? 'text-gray-700 hover:bg-gray-100'\n                    : 'text-gray-300 hover:bg-primary-dark-hover'\n              )}\n              type=\"button\"\n            >\n              <span className=\"w-5 h-5 flex-shrink-0\">\n                {option.icon}\n              </span>\n              <span className=\"text-sm\">{option.label}</span>\n              {theme === option.value && (\n                <span className=\"ml-auto w-2 h-2 bg-primary rounded-full\"></span>\n              )}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction getSystemTheme(): THEME.Light | THEME.Dark {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches\n      ? THEME.Dark\n      : THEME.Light;\n  }\n  return THEME.Light;\n}\n// ts-ignore-next-line\nfunction ResponsiveIcon({ Icon, ...props }: { Icon: React.ComponentType<any>;[key: string]: any }) {\n  const [isSmall, setIsSmall] = useState(false);\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const mq = window.matchMedia('(max-width: 639px)');\n      const handler = (e: MediaQueryListEvent) => setIsSmall(e.matches);\n      setIsSmall(mq.matches);\n      mq.addEventListener('change', handler);\n      return () => mq.removeEventListener('change', handler);\n    }\n  }, []);\n  return <Icon width={isSmall ? '1.2em' : undefined} height={isSmall ? '1.2em' : undefined} {...props} />;\n}\n\nexport default DarkModeToggle;"]}